'''
Written by Jason Reaves - @sysopfb
Free to use, attribute properly.

'''
import sys
import pefile
import struct
import nrv2b as nrv2b
import satan_embed

def decrypt(keystream, blob):
	for i in range(len(blob)):
		blob[i] ^= keystream[i%len(keystream)]

def rc4_crypt(data, sbox):
	S = list(sbox)
	out = []
 
	i = j = 0
	for char in data:
		i = ( i + 1 ) % 256
		j = ( j + S[i] ) % 256
		S[i] , S[j] = S[j] , S[i]
		out.append(chr(ord(char) ^ S[(S[i] + S[j]) % 256]))    
	return ''.join(out)



def is_64bit(pe):
	ret = True
	if pe.OPTIONAL_HEADER.Magic == 0x10b:
		ret = False
	return ret


def get_embedded(data):
	embedded = None
	offset = struct.unpack_from('<I', data[-4:])[0]
	if offset > len(data) or offset == 0:
		print("sanity failed")
		print(offset)
		return None
	blob = data[-offset-12:]
	poss_data = blob[:600]
	for i in range(len(data)-len(blob)):
		poss_sbox = bytearray(data[i:i+0x100])
		temp = rc4_crypt(poss_data, poss_sbox)
		if 'MZ' in temp and 'This' in temp and 'prog' in temp:
			print("found it!")
			temp = rc4_crypt(blob, poss_sbox)
			embedded = temp
	return embedded

def decoder(data):
	conf = None
	compressed = get_embedded(data)
	start = compressed.find('\xd9e\xb7\xfcMZ')
	print(start)
	start -= 8
	compressed_size = struct.unpack_from('<I', compressed[start:])[0]
	blob = compressed[start+4:compressed_size+start+8]
	uncomp = nrv2b.nrv2b(blob)
	try:
		pe = pefile.PE(data=uncomp)
	except:
		return conf
	if is_64bit(pe):
		print("64 bit found")
		if 'Mozilla' in uncomp:
			#This is the 64bit embedded file
			conf = satan_embed.decoder(uncomp)
		else:
			start2 = compressed[start+12:].find('\xd9e\xb7\xfcMZ')
			print(start2)
			start = start + 4 + start2
			compressed_size = struct.unpack_from('<I', compressed[start:])[0]
			blob = compressed[start+4:compressed_size+start+8]
			uncomp = nrv2b.nrv2b(blob)
			try:
				pe = pefile.PE(data=uncomp)
			except:
				return conf
			if not is_64bit(pe):
				print("32 bit found!")
				#open('32bit.bin', 'wb').write(uncomp)
				conf = satan_embed.decoder(uncomp)
	else:
		print("32 bit found")
		#open('32bit.bin', 'wb').write(uncomp)
		conf = satan_embed.decoder(uncomp)
	return conf


if __name__ == "__main__":
	data = open(sys.argv[1],'rb').read()
	t = decoder(data)
	print(t)

