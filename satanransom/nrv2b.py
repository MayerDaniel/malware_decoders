import struct

def getbit(src):
    global _bc, _ilen, bb

    if _bc > 0:
        _bc=_bc-1
        return ((bb >> _bc) & 0x1)
    else:
        _bc=31
        bb=struct.unpack("1I", src[_ilen:_ilen+4])[0]
        _ilen=_ilen+4
        return ((bb >> _bc) & 0x1)

def nrv2b(src):
    global _bc, _ilen, bb
    _bc=0
    _ilen=0
    bb=0
    dst_len=struct.unpack("1I", src[:4])
    src=src[4:]
    olen=0
    last_m_off=1
    src_len=len(src)
    dst=[]

    while True:
        bit = getbit(src)
        while bit!=0:
            dst.append(src[_ilen])
            olen=olen+1
            _ilen=_ilen+1
            bit = getbit(src)
        m_off=1
        bit=0
        while bit == 0:
            bit = getbit(src)
            m_off = m_off*2 + bit
            bit = getbit(src)
        if m_off == 2:
            m_off = last_m_off
        else:
            m_off = (m_off - 3)*256 + ord(src[_ilen])
            _ilen = _ilen+1
            if m_off == 0xffffffff:
                break
            last_m_off = m_off + 1
            m_off = m_off + 1
        m_len = getbit(src)
        bit = getbit(src)
        m_len = m_len*2 + bit
        if m_len == 0:
            m_len = m_len + 1
            bit=0
            while bit == 0:
                bit = getbit(src)
                m_len = m_len*2 + bit
                bit = getbit(src)
            m_len = m_len + 2
        m_len = m_len + (m_off > 0xd00)
        m_pos = olen - m_off
	try:
            dst.append(dst[m_pos])
        except:
            print(m_pos)
            return(''.join(dst))
        olen=olen+1
        m_pos=m_pos+1
        b=1
        while b > 0:
            dst.append(dst[m_pos])
            olen=olen+1
            m_pos=m_pos+1
            m_len=m_len-1
            b=m_len
    str=""
    for c in dst:
        str+=c
    return str
