'''
Written by Jason Reaves - @sysopfb
Free to use, attribute properly.

'''
import sys
import pefile
import struct
import binascii
import chacha as chachasec


def decoder(data):
	config = {}
	blob = ""
	conf = None
	#Try overlay first
	pe = pefile.PE(data=data)
	overlay = pe.get_overlay()
	if overlay == None:
		overlay = '\x00'*64
	for i in range(len(overlay)-64):
		(a,b,c,d) = struct.unpack_from('<IIII', overlay[i:])
		if a^b == c:
			key = overlay[i+16:i+16+32]
			data_check = overlay[i+16+32:i+16+32+8]
			cha = chachasec.ChaCha(key, '\x00'*8, 20)
			test = cha.decrypt(data_check)
			(test_val,conf_length) = struct.unpack_from('<II', test)
			if test_val == d:
				print("Found it!")
				cha = chachasec.ChaCha(key, '\x00'*8, 20)
				config_blob = overlay[i+16+32+8:i+16+32+8+conf_length]
				data2 = config_blob
				conf = cha.decrypt(data2)
				break
	'''
	for i in range(len(data)-32):
		(a,b,c,d) = struct.unpack_from('<IIII', data[i:])
		if a^b == c:
			key = data[i+16:i+16+32]
			data_check = data[i+16+32:i+16+32+8]
			cha = chachasec.ChaCha(key, '\x00'*8, 20)
			test = cha.decrypt(data_check)
			(test_val,conf_length) = struct.unpack_from('<II', test)
			if test_val == d:
				print("Found it!")
				cha = chachasec.ChaCha(key, '\x00'*8, 20)
				config_blob = data[i+16+32+8:i+16+32+8+conf_length]
				data2 = config_blob
				conf = cha.decrypt(data2)
				break
	'''
	if conf != None:
		j = 0
		while(j < len(conf)):
			dword = struct.unpack_from('<I', conf[j:])[0]
			j += 4
			size = dword & 0xffffff
			flag = dword >> 0x18
			blob = conf[j:j+size]
			print("Flag: "+str(flag))
			if flag == 1 and len(blob) == 40:
				config['id'] = binascii.hexlify(blob[:8])
				config['chacha_traffic_key'] = binascii.hexlify(blob[8:])
			if flag == 2:
				blob = conf[j:j+size]
				doms = filter(lambda x: x != '', blob.split('\x00'))
				config['c2s'] = doms
			j += size	
	
	else:
		dom = None
		#Check if older style
		test = overlay.split('\x00'*7)
		if len(test) > 1:
			doms = test[-2].strip('\x00')
			if '\x00' in doms and '.com' in doms:
				dom = doms
			blob = test[-1].strip('\x00')
		if len(blob) != 40:
			config['notes'] = "id_key find failure"
		else:
			config['id'] = binascii.hexlify(blob[:8])
			config['chacha_traffic_key'] = binascii.hexlify(blob[8:])
			cha = chachasec.ChaCha(blob[8:], '\x00'*8, 20)
			if dom == None:
				dom = cha.decrypt(doms)
			c2s = filter(lambda x: len(x) > 1, dom.split('\x00'))
			config['c2s'] = c2s
	return config
				

if __name__ == "__main__":
	data = open(sys.argv[1], 'rb').read()
	conf = decoder(data)
	print(conf)
