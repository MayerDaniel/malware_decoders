'''
Written by Jason Reaves - @sysopfb
Free to use, attribute properly.

'''
#Sample TOR: 090d7d8918c01d73b2f9d0fdf9f8f0dabb5a5deff4aae4afdc4b8c6341372aca
#Sample 

import pefile
import sys
import struct
import aplib
import binascii
import hashlib

JOINER_SECTIONS = {0xe1285e64: "CRC_PUBLIC_KEY", 0x8fb1dde1: "CRC_CLIENT_INI", 0xd722afcb: "CRC_CLIENT_INI", 0x9e154a0c: "CRC_LOADER_DLL", 0x41982e1f: "CRC_LOADER_DLL"}
INI_PARAMS = {0x4fa8693e: "CRC_SERVERKEY", 0xd0665bf6: "CRC_HOSTS", 0x656b798a: "CRC_GROUP", 0x556aed8f: "CRC_SERVER", 0x11271c7f: "CONF_TIMEOUT", 0x48295783: "CONFIG_FAIL_TIMEOUT"}

class IniParams:
	def __init__(self, count, iniParams):
		self.count = count
		self.ini_params = iniParams
	
	def put_param(self, param):
		self.ini_params.append(param)
		
	def __str__(self):
		ret_val = ""
		for param in self.ini_params:
			ret_val += str(param)+'\n'
		
		return ret_val

class IniParam:
	def __init__(self, hash, offset, data):
		self.name = "UNKNOWN"
		self.data = ""
		if hash in INI_PARAMS.keys():
			self.name = INI_PARAMS[hash]
		self.data = data[offset:].split('\x00')[0]
	
	def get_name(self):
		return self.name
	def get_data(self):
		return self.data
	
	def __str__(self):
		return(self.name+": "+str(self.data))

def pub_key_parse(data):
	print("PUB KEY:")
	print(binascii.hexlify(data))

def client_init_parse(data):
	print("INI PARAMS:")
	count = struct.unpack_from('<I', data)[0]
	params = IniParams(count,[])
	
	data = data[8:]
	for i in range(count):
		(hash,flag,offset,) = struct.unpack_from('<III', data)
		params.put_param(IniParam(hash,offset,data))
		data = data[0x18:]
	
	print(params)
	
def loader_dll_parse(data):
	pe = pefile.PE(data=data)
	if pe.OPTIONAL_HEADER.Magic == 0x10b:
		bit = "32"
	else:
		bit = "64"
	print("DLL:")
	print("Bit: "+bit)
	print("MD5: "+hashlib.md5(data).hexdigest())
	print("SHA256: "+hashlib.sha256(data).hexdigest())
	print("IMPHASH: "+pe.get_imphash())
	parse_ini(data)

handlers = {"CRC_PUBLIC_KEY": pub_key_parse, "CRC_CLIENT_INI": client_init_parse, "CRC_LOADER_DLL": loader_dll_parse}

def parse_ini(file_data, ADDON_MAGIC=["JF", "J1"]):
	pe = pefile.PE(data=file_data)

	#if len(sys.argv) > 2:
	#	ADDON_MAGIC = [sys.argv[2]]
	#else:
	#	ADDON_MAGIC = ["JF", "J1"]

	file_data = pe.get_memory_mapped_image()

	for magic in ADDON_MAGIC:
		index = 0
		for i in range(2):
			temp = file_data[index:].find(magic)
			if temp != -1:
				index += temp
				(magicVal,flags,section,offset,length,) = struct.unpack_from('<IIIII', file_data[index:])
				if section in JOINER_SECTIONS.keys():
					handler = handlers[JOINER_SECTIONS[section]]
					compressed_data = file_data[offset:offset+length]
					uncompressed = aplib.decompress(compressed_data).do()
					handler(uncompressed[0])
				else:
					print("UNKNOWN SECTION: " +hex(section))
				index += 1
			else:
				break
		

if __name__ == "__main__":
	data = open(sys.argv[1],'rb').read()
	parse_ini(data)
