'''
Written by Jason Reaves - @sysopfb
Free to use, attribute properly.
'''

import sys
import ammycrypt
import pefile
import binascii
import struct

#regular AmmyAdmin default key
default_key = "aSg@f1H_hjy!"

def get_rsrc(pe):
	ret = []
	for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
		if resource_type.name is not None:
			name = str(resource_type.name)
		else:
			name = str(pefile.RESOURCE_TYPE.get(resource_type.struct.Id))
		if name == None:
			name = str(resource_type.struct.name)
		if hasattr(resource_type, 'directory'):
			for resource_id in resource_type.directory.entries:
				if hasattr(resource_id, 'directory'):
					for resource_lang in resource_id.directory.entries:
						data = pe.get_data(resource_lang.data.struct.OffsetToData,resource_lang.data.struct.Size)
						ret.append((name,data,resource_lang.data.struct.Size,resource_type))
	return ret

#From AmmyAdmin source
flags = {1: 'ViewScreen', 2: 'RemoteControl', 4: 'ClipboardOut', 8: 'ClipboardIn', 16: 'FileManager', 32: 'AudioChat', 64: 'RDPsession'}

def decoder(data):
	config = {}
	pe = pefile.PE(data=data)
	key = binascii.unhexlify('6b2f3da798926116a63f187b9891e0d4bc5a6382')
	rsrcs = get_rsrc(pe)
	for r in rsrcs:
		if r[0] == 'BINARY':
			blob = r[1]
			t = ammycrypt.ammy_decrypt(key, blob)
			print(binascii.hexlify(t))
			if '.' not in t:
				t = ammycrypt.ammy_decrypt(default_key, blob)
			print(binascii.hexlify(t))
			try:
				config['RAW'] = binascii.hexlify(t)
				config['VER'] = binascii.hexlify(t[:4])
				config['DATE_VAL'] = struct.unpack_from('<HHHHHHH', t[4:])
				config['FLAGS'] = binascii.hexlify(t[18:24])
				c2 = t[24:].split('\x00')[0]
				config['C2'] = c2
				rest = t[24+len(c2)+1:]
				(config['PORT'],config['M_ID'],m_vals) = struct.unpack_from('<HII', rest)
				config['RLMD5'] = binascii.hexlify(rest[10:26])
				temp = [flags[x] for x in flags.keys() if m_vals & x != 0]
				config['M_VALS'] = m_vals
				config['M_VAL_FLAGS'] = temp
			except:
				config = {}
				config['RAW'] = binascii.hexlify(t)
				
	return config

if __name__ == "__main__":
	data = open(sys.argv[1], 'rb').read()
	t = decoder(data)
	print(t)
